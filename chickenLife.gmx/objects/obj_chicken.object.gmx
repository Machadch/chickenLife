<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chxLeft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chickenID =  global.chickenCount + 1;
global.chickenCount += 1;
hungerDegrade = .0055;
thirstDegrade = .009;
state = states.idle;
hunger = 1000;
thirst = 1000;
spd = 1;
dir = 0;
data = 0;
layDate = 0;
place_free(96,288);
location = 'yard';
chickenMenu = 'closed';
name = 'Chicken' + string(chickenID);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.location = "yard";
self.visible = true;
state = states.idle;
x = 256;
y = 288;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mp_linear_step(random(room_width), random(room_height), 1.5, 0);

alarm[1] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.osPause = 1) {
    global.loadDiff = date_second_span(date_current_datetime(),global.savedTime);
    if (global.loadDiff &gt; 2 ) {
        pauseHunger = ((global.loadDiff * 30) * self.hungerDegrade);
        pauseThirst = ((global.loadDiff * 30) * self.thirstDegrade);
        //Deal with hunger
            if (self.hunger &lt; pauseHunger) {
            remainderHunger = (pauseHunger mod 1000);
            roundHunger = (pauseHunger / 1000);
            round(roundHunger);
            if (obj_feeder.feedLevel &gt;= roundHunger) {
                obj_feeder.feedLevel -= roundHunger;
                self.hunger = (1000 - remainderHunger);            
                }
            else {
            obj_feeder.feedLevel = 0;
            self.hunger = 0;
            }
            }
            else self.hunger -= pauseHunger;
        //Deal with thirst
            if (self.thirst &lt; pauseThirst) {
                remainderThirst = (pauseThirst mod 1000);
                roundThirst = (pauseThirst / 1000);
                round(roundThirst);
            if (obj_water.waterLevel &gt;= roundThirst) {
                obj_water.waterLevel -= roundThirst;
                self.thirst = (1000 - remainderThirst);            
                }
            else obj_water.waterLevel = 0;
            self.thirst = 0;        
        }
        else self.thirst -= pauseThirst;
        //Chance of egg spawn
    if (self.layDate &lt; current_day) {
        if (irandom(4) = 1) {
             global.eggsLaid += 1;
             self.layDate = current_day;
            }
        }
    }
    obj_control.alarm[1] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (speed &gt; 2) speed = 2;

global.chickenArray[self.chickenID,0] = self.hunger;
global.chickenArray[self.chickenID,1] = self.thirst;
global.chickenArray[self.chickenID,2] = self.layDate;
global.chickenArray[self.chickenID,3] = self.location;


switch (state) {
    case states.idle: scr_chickenIdle(); break;
    case states.hungry: scr_chickenHungry(); break;
    case states.eating: scr_chickenEating(); break;
    case states.thirsty: scr_chickenThristy(); break;
    case states.drinking: scr_chickenDrinking(); break;
    case states.laying: scr_chickenLaying(); break;
    case states.sleeping: scr_chickenSleeping(); break;
}
switch (direction div 90) {
case 0: sprite_index = spr_chxRight; break;
case 1: sprite_index = spr_chxUp; break;
case 2: sprite_index = spr_chxLeft; break;
case 3: sprite_index = spr_chxDown; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room = rm_yard) scr_chickenClick();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>113</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_reverse_xdir</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room = rm_yard and self.location = 'yard') { 
    draw_self();
    if (global.debug = 1) {
        draw_text(self.x-16,self.y-64,'Hunger: ' + string(hunger));
        draw_text(self.x-16,self.y-32,'Thirst: ' + string(thirst));
        draw_text(self.x-16,self.y-96,'State: ' + string(self.state));
        draw_text(self.x-16,self.y-128,'Lay date: ' + string(self.layDate));
    }
}

if (room = rm_nestBox and self.location = 'roost') { 
    draw_self();
    if (global.debug = 1) {
        draw_text(self.x-16,self.y-64,'Hunger: ' + string(hunger));
        draw_text(self.x-16,self.y-32,'Thirst: ' + string(thirst));
        draw_text(self.x-16,self.y-96,'State: ' + string(self.state));
        draw_text(self.x-16,self.y-128,'Lay date: ' + string(self.layDate));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
